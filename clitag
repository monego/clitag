#!/usr/bin/python3

import argparse
import mutagen
import re


parser = argparse.ArgumentParser(description='clitag')

at_group = parser.add_argument_group('autotitle')
at_group.add_argument('--autotitle', type=int, nargs=2,
                      metavar=('START', 'END'),
                      help="Autotitle based on filename. Requires --sep")
at_group.add_argument('--sep', type=str, nargs=1,
                      help="Separator for autotitle")

parser.add_argument('--check', action='store_true',
                    help='List audio files and tags')
parser.add_argument('--title', type=str, nargs=1,
                    help='Change audio title')
parser.add_argument('--artist', type=str, nargs=1,
                    help='Change audio artist')
parser.add_argument('--album', type=str, nargs=1,
                    help='Change audio album')
parser.add_argument('--genre', type=str, nargs=1,
                    help='Change audio genre')
parser.add_argument('--date', type=int, nargs=1,
                    help='Change audio date')
parser.add_argument('--tracktotal', type=int, nargs=1,
                    help='Number of tracks in the album')
parser.add_argument('--description', type=str, nargs=1,
                    help='Change audio description')
parser.add_argument('--autonumber', action='store_true',
                    help="Autonumber the track files")
parser.add_argument('--re', action='store_true',
                    help="Use regular expressions")
parser.add_argument('--delete', type=str, nargs='+',
                    help="Delete some keys")
parser.add_argument('files', type=str, nargs='+',
                    help="The files to change")


def main():

    args = parser.parse_args()

    for n, f in enumerate(args.files):
        afile = mutagen.File(f)

        if args.check:
            for key, value in afile.items():
                print(key, ': ', value)
            print("")

        if args.autonumber:
            afile["tracknumber"] = str(n+1)

        if args.autotitle and args.sep:
            sep = args.sep[0]
            fname = f.split(sep=sep)
            start, end = args.autotitle[0], args.autotitle[1]
            afile["title"] = " ".join(fname[start:end])
        elif args.autotitle and not args.sep or not args.autotitle and args.sep:
            raise TypeError("Autotitling requires both --autotitle and --sep")

        if args.delete:
            for kd in args.delete:
                afile.pop(kd, None)

        if args.re:
            if args.title:
                title = args.title[0].split(sep="/")
                afile["title"] = re.sub(r"{}".format(title[1]),
                                        title[2], afile["title"][0])
            if args.album:
                album = args.album[0].split(sep="/")
                afile["album"] = re.sub(r"{}".format(album[1]),
                                        album[2], afile["album"][0])
            if args.description:
                description = args.description[0].split(sep="/")
                afile["description"] = re.sub(r"{}".format(description[1]),
                                              description[2],
                                              afile["description"][0])

        else:
            if args.title:
                title = args.title[0]
                afile["title"] = title
            if args.artist:
                artist = args.artist[0]
                afile["artist"] = artist
            if args.album:
                album = args.album[0]
                afile["album"] = album
            if args.genre:
                genre = args.genre[0]
                afile["genre"] = genre
            if args.date:
                date = args.date[0]
                afile["date"] = str(date)
            if args.tracktotal:
                tracktotal = args.tracktotal[0]
                afile["tracktotal"] = str(tracktotal)
            if args.description:
                description = args.description[0]
                afile["description"] = description

        afile.pprint()
        afile.save()


if __name__ == "__main__":
    main()
